{"version":3,"sources":["logo.svg","components/card/Card.js","components/header/Header.js","components/wrapper/wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","className","onClick","clickCount","id","alt","name","src","image","Header","children","score","highscore","Wrapper","App","state","cardList","_this","find","card","i","count","setState","console","log","this","sort","Math","random","gameOver","forEach","alert","concat","_this2","wrapper_Wrapper","Header_Header","map","Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8mDAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6NCGlCC,eAAO,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCHjCC,SAAS,SAAAZ,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMa,UAC9BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMc,MADhB,eACmCd,EAAMe,cCJvCC,SAAU,SAAAhB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,mBC8D1CI,oNAvDbC,MAAQ,CACNC,WACAL,MAAO,EACPC,UAAW,KAGbT,WAAa,SAAAC,GACXa,EAAKF,MAAMC,SAASE,KAAK,SAACC,EAAMC,GAC9B,GAAID,EAAKf,KAAOA,EAAI,CAClB,GAA0B,IAAtBY,EAASI,GAAGC,MAMd,OALAL,EAASI,GAAGC,MAAQL,EAASI,GAAGC,MAAQ,EACxCJ,EAAKK,SAAS,CAAEX,MAAOM,EAAKF,MAAMJ,MAAQ,GAAK,WAC7CY,QAAQC,IAAIC,KAAKV,MAAMJ,SAEzBM,EAAKF,MAAMC,SAASU,KAAK,kBAAMC,KAAKC,SAAW,MACxC,EAEPX,EAAKY,iBAMbA,SAAW,WAWT,OAVIZ,EAAKF,MAAMJ,MAAQM,EAAKF,MAAMH,WAChCK,EAAKK,SAAS,CAAEV,UAAWK,EAAKF,MAAMJ,OAAS,WAC7CY,QAAQC,IAAIC,KAAKV,MAAMH,aAG3BK,EAAKF,MAAMC,SAASc,QAAQ,SAAAX,GAC1BA,EAAKE,MAAQ,IAEfU,MAAK,6BAAAC,OAA8Bf,EAAKF,MAAMJ,QAC9CM,EAAKK,SAAS,CAAEX,MAAO,KAChB,2EAEA,IAAAsB,EAAAR,KACP,OACE3B,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAD,CAAQxB,MAAOc,KAAKV,MAAMJ,MAAOC,UAAWa,KAAKV,MAAMH,WAAvD,cAGCa,KAAKV,MAAMC,SAASoB,IAAI,SAAAjB,GAAI,OAC3BrB,EAAAC,EAAAC,cAACqC,EAAD,CACElC,WAAY8B,EAAK9B,WACjBC,GAAIe,EAAKf,GACTkC,IAAKnB,EAAKf,GACVI,MAAOW,EAAKX,kBAhDN+B,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.809e98b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport { Card };\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nconst Header = props => (\r\n  <div className=\"header\">\r\n    <div className=\"title\">{props.children}</div>\r\n    <div className=\"scores\">\r\n      Score: {props.score} Highscore: {props.highscore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport { Header };\r\n","import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport { Wrapper };\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\n// import Card from \"./components/card/index.js\";\n// import Header from \"./components/header/index.js\";\n// import Wrapper from \"./components/wrapper/index.js\";\nimport { Card, Header, Wrapper } from \"./components\";\nimport cardList from \"./cardList.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    cardList,\n    score: 0,\n    highscore: 0\n  };\n\n  clickCount = id => {\n    this.state.cardList.find((card, i) => {\n      if (card.id === id) {\n        if (cardList[i].count === 0) {\n          cardList[i].count = cardList[i].count + 1;\n          this.setState({ score: this.state.score + 1 }, function() {\n            console.log(this.state.score);\n          });\n          this.state.cardList.sort(() => Math.random() - 0.5);\n          return true;\n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  };\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score }, function() {\n        console.log(this.state.highscore);\n      });\n    }\n    this.state.cardList.forEach(card => {\n      card.count = 0;\n    });\n    alert(`Game Over! \\n Your score: ${this.state.score}`);\n    this.setState({ score: 0 });\n    return true;\n  };\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>\n          CLICK GAME\n        </Header>\n        {this.state.cardList.map(card => (\n          <Card\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}